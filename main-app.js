// Источник видео канала "webDev" "Node.js #11 Node.js & Express (Node.js & Express)": https://youtu.be/EJ19W30iiVA?list=PLNkWIWHIRwMFtsaJ4b_wwkJDHKJeuAkP0
// В данном уроке была создаем сервер с использованием установленных пакетов express, ejs и nodemon, чтобы постоянно не перезапускать сервер

//!!--------ОСТАНОВИЛСЯ НА 2:29: https://youtu.be/EJ19W30iiVA?list=PLNkWIWHIRwMFtsaJ4b_wwkJDHKJeuAkP0&t=149
// Справка: основные МЕТОДЫ протокола HTTP
// 1) GET - ПОЛУЧЕНИЕ данных (сайт получает данные с сервера)
// 2) POST - ДОБАВЛЕНИЕ данных (сайт отправляет на сервер новые данные в тот же БД MongoDB)
// 3) DELETE - УДАЛЯЕТ существующие данные (с сайта запрос на удаление каких-либо данных в БД сервера)
// 4) PUT - ОБНОВЛЯЕТ существующие данных (с сайта запрос на извененение данных в БД сервера)
// PS.На практике разберусь


//! Реализация сервера, с использвованием минилистичного web-framework EXPESS.JS
// Из Express.js мы будем использовать: 
// 1) - роутинг (передача данных относительно полученного url)
// 2) - Middleware (промежуточный сервер, связующее ПО, которое момогает обмениватся данными между приложением и сервером)
// 3) - взимодействие с API
// 4) - а также для удобной интеграцией с EJS - шаблонизатором, который мы уже установили

const express = require('express');
const app = express()

//посмотрел что находится в методе express() пакета express.js
//console.log(express()); // объект с методами, например: get, put, delete, del, render и т.д.

const path = require('path');
// const fs = require('fs');

const PORT = 3000;

// метод для построения путей
const createPath = (page) =>  { return path.resolve(__dirname, 'views', `${page}.html`)};

// назначение порта для прослушивания запросов
// так как, что у стандартного Node.js-ого, что у Express.js в методе listener аргумент 'localhost' стоит по-умолчанию, значит не станем его указывать
app.listen(PORT, (error) => {
    error ? console.log(error) : console.log(`Listening port ${PORT}`); 
});

//! В Express порядок роутов имеет значение, то есть: если в начале прописать обработку ошибки, то на сайте будет только страница ошибки. Обработка идет сверху в низ, поэтому "обработка ошибки" должна быть в самом конце
// Пример:
// 1) Роут для домашней страницы (/homе)
// 2) Роут для страницы контактов (/contacts)
// 3) Роут для страницы редиретка (/about-us => /contacts)
// 4) И в конце обработка ошибки  (/error)

//* 1 - HOME
// так как expess сам создает сервер, то мы уже можем обмениватся данными сразу после назначения порта
//метод для отправки данных с сервера в браузер. 
// app.get('роутинг или запрос на url', callback, которая будет вызыватся, у котрой также есть аргументы req - запрос, res - ответ)
app.get('/', (req, res) => { // req - запрос, res - ответ
    // вместо прежних res.write() и res.end(), для отправки ПРИМЕТИВНЫХ ДАННЫХ используем .send:
    // res.send('<h1>Приветос, Брооо...)</h1>'); // express автоматически устанавливает формат заголовков (setHaeder), относительно аргумента. То есть html -> будет html, текст - будет протсо текст

    // метод для ОТПРАВКИ ФАЙЛА
    // res.sendFile(path [, options] [, fn]) - подробнее на оф. сайте: http://expressjs.com/en/5x/api.html#res.sendFile
    res.sendFile(createPath('index')) // отправка определнной страницы, относительно полученному запросу, где запрос на url: /
 
});


//* 2 - CONTACTS
// подобный (выше) код пишем также для страницы контактов
app.get('/contacts', (req, res) => { 
    res.sendFile(createPath('contacts')) 
 
});



//* 3- РЕДИРЕКТ
app.get('/about-us', (req, res) => {
    // res.redirect([status,] path) - метод редиректа
    // Перенаправляет на URL-адрес, полученный из указанного пути, с указанным статусом, положительным целым числом, соответствующим коду статуса HTTP. Если не указано, статус по умолчанию «302 «Найдено». Подробнее на оф.сайте: http://expressjs.com/en/api.html#res.redirect
    res.redirect('/contacts'); // аргумент URL-адрес
});

//* 4- ОШИБКА
// если url не сущетсвующий, то вернется станица error
// app.use([path,] callback [, callback...]) - подробее на оф. сайте: http://expressjs.com/en/5x/api.html#app.use
// ПРИМЕР MIDDLEWARE, который перехватые не верные пути и рендерить страницу-ошибку
app.use((req, res) => { 
    // есть два варианта передачи кода (в данном случае ошибки)
    // 1) стандартный от NOdejs
    res.statusCode = 404;
    // 2) и имеющийся у Express
    
    // ниже удобный синтаксис цепочка, как у JS-прописов promise().then().catch().finaly
    res
    .status(404)
    .sendFile(createPath('error')); 
});