// Урок №4: "Node.js #4 Node.js и файловая система (Node.js & File System)": https://youtu.be/0TcIslnoXCQ?list=PLNkWIWHIRwMFtsaJ4b_wwkJDHKJeuAkP0
// импортируем глобальный объект 'fs' (files system) - для взаимодействия с файловой системой
const fs = require('fs');


// содержание: 
//1) АСИНХРОННАЯ конструкция:  чтение { создание папки {запись прочитаных данных в новый файл{} } }
//2) частично СИНХРОННАЯ конструкция:  асих-чтение { синх-создание папки {...} синх-запись прочитаных данных в новый файл{} } 
//3) удаление ФАЙЛА, спустя 4000 ms с учетом проверку существования файла 
//4) удаление ПАПКИ, спустя 6000 ms с учетом проверку существования папки 
// логика ниже: сначала (выше) мы создали файл, потом в него записали данный,
// далее: спустя 4000 ms удалим файл, и спустя 6000 ms удалим папку

// //АСИНХРОННЫЙ ВАРИАНТ чтения, создание папки и записи данных
// // 1) Асинхронный вариант чтения fs.readFile -  чтобы получить доступ и прочитать данные с нужного файла, в нашем случае это "test.txt"
// // без аргмента "utf8" или метода data.toString()- данные будут в виде буфера (пример: <Buffer 2f 2f 2 ... 117 more bytes>)
// fs.readFile('./test.txt', 'utf8',(error, data) => { // error - это объект ошибки, data - это данные при чтении
//     // console.log(data);

// // 3) Асинхронный метод fs.mkdir -  Чтобы создать новую папку (директиву)
// // так как метод асинхронный, значит метод записи помещаем в метод создания папки. Либо используем JS-Promise, т.е. .then().catch()
//     fs.mkdir('./files', () => {

// // 2) Асинх вариант записи/перезапись fs.writeFile - Создание нового файла и ЗАПИСЬ в него.
//         fs.writeFile('./files/test2.txt', `${data} New text!`, (error) => {
//             error ? console.log(error) : null; // чтобы видеть в консоли ошибки
//         })        

//     })
// });


console.log('*Если метод .readFlie работает АСИНХРОННО, то эта запись появиться ПЕРВЫМ. Ведь асинхронные оперции переходят в очеред событий (EventQueue), и только потом они срабатывают, как будут готовы');


//СИНХРОННЫЙ ВАРИАНТ СОЗДАНИЕ ПАПКИ и ЗАПИСИ ДАННЫХ (без вложенности .writeFileSync в .mkdirSync)

// Чтобы быть увереным, что запись произайдет после СОЗДАНИЯ папки, заменим асинхронный варианты созадния папки и записиси на Синхронные.
// Синхронные блокирует поток, то есть пока синхронная оперция не закончится, другие операции не начнут работать
// Но readFile оставим асинхронным, дабы синхронность блокирующая весь код, нам не нужна. А так - это выбор случая.
fs.readFile('./test.txt', 'utf8', (error, data) => {
    fs.mkdirSync('./files', () => {}); // Синхронная версия создани папки. Если вложить в него синхронную запись, то запись не сработает
    fs.writeFileSync('./files/test2.txt', `Новая запись ${data}`, (error) => {
        error ? console.log(error) : null;
    })
    
})


// УДАЛЕНИЕ ФАЙЛА, ДЕРИКТОРИИ, А ТАКЖЕ ПРОВЕРКУ НА ИХ СУЩЕСТВОВАНИЕ:

// логика: сначала (выше) мы создали файл, потом в него записали данный,
// далее: спустя 4000 ms удалим файл, и спустя 6000 ms удалим папку

// УДАЛЕНИЕ ФАЙЛА
setTimeout(() => {
    // условие на проверку сущесвтуели это файл, чтобы не запсуает лишний раз процесс удаления
    // Синхронный вариант fs.existsSync('path') - проверка на существование файла
    if (fs.existsSync('./files/test2.txt')) {
    // fs.unlink('path', callback) - удаление файла
        fs.unlink('./files/test2.txt', () => {});
    }
}, 4000);
    

// УДАЛЕНИЕ ПАПКИ (директории)
setTimeout(() => {
    if (fs.existsSync('./files')) {
    // fs.rmdir('path', callback) - удаление файла
        fs.rmdir('./files', () => {});
    }
}, 6000);

// проверку на сущаетсвование также можно сипользовать в логике записи данных, чтобы не перезаписывать, если уже было записано